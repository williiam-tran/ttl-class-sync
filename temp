
This logic is wrong, reimplement completely from scratch.
This is the expected behaviour:
1. User choose lecture notes and students, can either be a list or single based on parameters, separated by comma:
Example:
- python .\process_words_from_lecture_notes.py 2 Thanh,TLinh
- python .\process_words_from_lecture_notes.py 1,2 Thanh
The lecture notes will follow naming convention: 1st, 2nd, 3rd, 4th, 5th, etc.

2. Inside lecture notes, students vocabulary will be in header level 2 vocabulary: ## Vocabulary
Students' new words will be individual or in a student group, following the same convention separated by comma. Examples:
## Vocabulary
### Thanh, Tuan
or:
## Vocabulary
### Thanh
- [ ] new word
### Tuan
3. New words in each section will be using task syntax, starting with: - [ ]
3.1 In the same line, there can be many words, indicating relationships, currently there are 3:
- `~` separator means synonyms
- `><` separator means antonyms
- `->' separator means related words
Examples:
- [ ] optimistic ~ optimist ~ sanguine
- [ ] simple -> simplify -> oversimplify
- [ ] show up >< disappear

4. After getting list of words for corresponding student for each lecture notes, put them in the word bank of that student.
4.1 Find the lecture index in the word bank, using header level 2. If not existed yet, then create a new one, also following naming convention: 1st,2nd,3rd. Example:
## 1st
## 2nd 
4.2 If the word entries for that lecture part exist, then skip, else put the new entry in the respective lecture index.
4.3 Sort all words entries alphabetically.
